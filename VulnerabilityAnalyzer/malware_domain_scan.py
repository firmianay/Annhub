# -*- coding: utf_8 -*-

import io
import re
import hashlib
import tempfile
import shutil
import json
from urllib import request
from urllib import parse

import setting
from VulnerabilityAnalyzer import java_scan

root_dir = setting.get_root_dir()
org_list = root_dir + 'VulnerabilityAnalyzer/malware_domain_list.csv'


def update_domain_list():
    try:
        url = "https://www.malwaredomainlist.com/mdlcsv.php"
        response = request.urlopen(url)
        data = response.read()
        tmp_file = tempfile.NamedTemporaryFile()
        tmp_file.write(data)

        if hashlib.md5(org_list.encode('utf-8')) != hashlib.md5(tmp_file.name.encode('utf-8')):
            print("恶意url和ip库需要更新")
            rd = io.open(tmp_file.name, mode='r', encoding='utf-8', errors='ignore')
            line = rd.readline()
            rd.close()
            lst = line.split('",')
            if len(lst) == 10:
                shutil.copyfile(tmp_file.name, org_list)
                print("更新完成")
            else:
                print("网络数据格式有改变，跳过更新本地库")
        else:
            print("本地库版本已是最新")
    except Exception as e:
        print(e)
        print("更新恶意url库失败")


def domain_scan(app_home):
    try:
        print("开始恶意url和ip扫描")
        #update_domain_list()
        _, ips, urls, _, _ = java_scan.get_from_java(app_home)

        domain_list = ips + urls
        DOMAINS = []

        for domain in domain_list:
            parsed_url = parse.urlparse(domain)
            domain = '{uri.netloc}'.format(uri=parsed_url)
            if ((domain not in DOMAINS) and (len(domain) > 2) and ("." in domain) and (domain.endswith(".") == False and re.search('[a-zA-Z0-9]', domain))):
                DOMAINS.append(domain.strip())

        result = {}

        if DOMAINS:
            with io.open(org_list, mode='r', errors='ignore') as f:
                entry_list = f.readlines()
            for entry in entry_list:
                enlist = entry.split('","')
                if len(enlist) == 9:
                    list_dic = {}
                    list_dic["date"] = enlist[0].split('"')[-1]
                    list_dic["domain"] = enlist[1]
                    list_dic["ip"] = enlist[2]
                    list_dic["reverse_lookup"] = enlist[3]
                    list_dic["description"] = enlist[4]
                    list_dic["registrant"] = enlist[5]
                    list_dic["ASN"] = enlist[6]
                    list_dic["country"] = enlist[8].split('",\n')[0]
                    list_dic["bad"] = "yes"

                for domain in DOMAINS:
                    if (domain in list_dic["domain"]) or (domain in list_dic["ip"]):
                        result[domain] = list_dic
            for domain in DOMAINS:
                if domain not in result:
                    x = {}
                    x["bad"] = "no"
                    result[domain] = x
        for i in DOMAINS:
            print(i)
        re_json = json.dumps(result, indent=2)
        print(re_json)
        print("扫描成功")
        return result
    except Exception as e:
        print(e)
        print("扫描失败")

domain_scan("/home/firmy/Downloads/annhub/SaveAPKs/87d93d33e2ec5ae15b93fdaa642ffeb0")